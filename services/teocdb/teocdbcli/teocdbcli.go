// Copyright 2019 Teonet-go authors.  All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Package teocdbcli is the Teonet cdb service client package
package teocdbcli

import "encoding/binary"

// Key value database commands
const (
	CmdSetB = 129 // Set (insert or update) binary {key,value} to database
	CmdSet  = 130 // Set (insert or update) text or json \"key,value\" to database
	CmdGet  = 131 // Get key value and send answer with value in text or json format
	CmdList = 132 // Get list of keys (by not complete key) and send answer with array of keys in text or json format
)

// Teocdbcli is teocdbcli packet receiver
type Teocdbcli struct {
	con      TeoConnector
	peerName string
}

// TeoConnector is teonet connector interface. It may be servers (*Teonet) or
// clients (*TeoLNull) connector and must conain SendTo method.
type TeoConnector interface {
	SendTo(peer string, cmd byte, data []byte) (int, error)
}

// JSONData is key value packet in json format
type JSONData struct {
	Key   string      `json:"key"`
	ID    interface{} `json:"id"`
	Value interface{} `json:"value"`
}

// BinaryData is key value packet in binary format
type BinaryData struct {
	Key   string
	ID    int
	Value []byte
}

// MarshalBinary encodes the receiver into a binary form and returns the result.
func (bd *BinaryData) MarshalBinary() (data []byte, err error) {
	l := make([]byte, 4)
	binary.LittleEndian.PutUint32(l, uint32(len(bd.Key)))
	data = append(append(l, []byte(bd.Key)...), bd.Value...)
	return
}

// UnmarshalBinary must be able to decode the form generated by MarshalBinary.
// UnmarshalBinary must copy the data if it wishes to retain the data
// after returning.
func (bd *BinaryData) UnmarshalBinary(data []byte) (err error) {
	l := binary.LittleEndian.Uint32(data[:4]) + 4
	bd.Key = string(data[4:l])
	bd.Value = data[l:]
	return
}

// NewTeocdbcli create new teocdbcli object
func NewTeocdbcli(con TeoConnector, ii ...interface{}) *Teocdbcli {
	var peerName string
	if len(ii) > 0 {
		if v, ok := ii[0].(string); ok {
			peerName = v
		} else {
			peerName = "teo-cdb"
		}
	}
	return &Teocdbcli{peerName: peerName}
}

// Set is clients api function to insert or update binary {key,value} buffer in
// teonet database. This function sends teocdb.CmdSetB(#129) command to teo-cdb
// teonet service which save it in key/value database.
func (cdb *Teocdbcli) Set(con TeoConnector, key string, value []byte) (err error) {
	if data, err := (&BinaryData{Key: key, Value: value}).MarshalBinary(); err == nil {
		_, err = cdb.con.SendTo(cdb.peerName, CmdSetB, data)
	}
	return
}
